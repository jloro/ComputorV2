#include "Core.hpp"
#include <curses.h>
#include <cctype>
#include <regex>

#define FCT "(\\w+\\(\\w\\))="

Core::Core() {}

Core::~Core() {}

double Core::EvalExpr(std::string str)
{
	double ret = 0;

	if (str.find_last_of("(") != std::string::npos)
	{
		std::string subcalc = str.substr(str.find_last_of("(") + 1, str.find(")", str.find_last_of("(")) - str.find_last_of("(") - 1);
		double posSubcalc = str.find_last_of("(");
		str.erase(str.find_last_of("("), str.find(")", str.find_last_of("(")) - str.find_last_of("(") + 1);
		if (!std::regex_match(subcalc, std::regex("\\+|\\*|/|\\-")))
			printw("YA R FO FAIRE EXCEPTION");
		std::string::size_type sz;
		double left = std::stod (subcalc,&sz);
		double right = std::stod (subcalc.substr(sz));
		if (subcalc[sz] == '*')
			ret = left * right;
		else if (subcalc[sz] == '-')
			ret = left - right;
		else if (subcalc[sz] == '+')
			ret = left + right;
		else if (subcalc[sz] == '/')
			ret = left / right;
		else
			printw("PB DOPERATEUR DE CALCUL FO FAIRE EXCEPTION");
		str.insert(posSubcalc, std::to_string(ret));
	}
	else
	{
		std::smatch m;
		while (std::regex_search(str, m, std::regex("\\d(?:\\*|/)\\d")))
		{
			for (auto x:m)
			{
				printw(std::to_string(x));
				printw("\n");
			}
		}
	}
	return ret;
}

void Core::Assignation()
{
	EvalExpr(_cmd);
	if (std::regex_match(_cmd, std::regex(FCT)))
		printw("FCT\n");
}

void Core::Exec()
{
	_cmd.erase(std::remove(_cmd.begin(), _cmd.end(), ' '), _cmd.end());
	for (std::string::iterator it = _cmd.begin(); it != _cmd.end(); it++)
		*it = tolower(*it);
//	if (!checkAllChar(_cmd))
//		throw std::runtime_error("Syntax error: unexpected character.");
	printw("%s\n", _cmd.c_str());
	if (std::regex_match(_cmd, std::regex(".*\\?$")))
		printw("CALCUL\n");//CALCUL
	else
		Assignation();
}

void Core::Loop()
{
	while (1)
	{
		printw("> ");
		ReadLine(_historic);
		if (_cmd.compare("exit") == 0)
			break;
		_historic.Add(_cmd);
		printw("\n");
		Exec();
		_cmd.clear();
	}
}

void	Core::ReadLine(Historic & historic)
{
	int old_curs = curs_set(1);
	size_t pos = 0;
	int x, y, c;
	getyx(stdscr, y, x);

	while (1)
	{
		mvaddnstr(y, x, _cmd.c_str(), _cmd.size());
		move(y, x+pos);
		c = getch();

		if (c == KEY_ENTER || c == '\n' || c == '\r')
			break;
		else if (isprint(c)) 
		{
			if (_cmd.size() < 100)
				_cmd.insert(_cmd.begin() + pos++, c);
		} 
		else if (c == 260) 
		{
			if (pos > 0)
				pos -= 1;
		}
		else if (c == KEY_RIGHT) 
		{
			if (pos < _cmd.size())
				pos += 1;
		} 
		else if (c == KEY_UP || c == KEY_DOWN) 
		{
			if (c == KEY_UP)
				_cmd = historic.GetPrevCmd();
			else
				_cmd = historic.GetNextCmd();
			if (pos > _cmd.size())
			{
				while (pos > _cmd.size())
				{
					delch();
					pos--;
					move(y, x+pos);
				}
				delch();
			}
			pos = _cmd.size();
		} 
		else if (c == 127) 
		{
			if (pos > 0) 
			{
				_cmd.erase(pos - 1, 1);
				mvdelch(y, x + pos - 1);
				pos -= 1;
			}
		}
	}

	mvaddnstr(y, x, _cmd.c_str(), _cmd.size());
	if (old_curs != ERR) 
		curs_set(old_curs);
}
